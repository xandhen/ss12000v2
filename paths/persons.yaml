persons:
  get:
    tags:
      - Person
    summary: Hämta en lista med personer.
    parameters:
      - name: nameContains
        description: |
          Begränsa urvalet till de personer vars namn innehåller något av parameterns värden.
          Sökningen **ska** ske shiftlägesokänsligt och värdet kan förekomma var som helst i något av alla tre namnfälten. 
          Anges flera värden så måste samtliga värden matcha minst ett av namnfälten.

          Exempel: [ "Pa", "gens" ] kommer matcha Palle Girgensohn.
        in: query
        schema:
          type: array
          items:
            type: string
      - name: civicNo
        description: Begränsa urvalet till den person vars civicNo matchar parameterns värde.
        in: query
        schema:
          type: string

      - name: eduPersonPrincipalName
        description: Begränsa urvalet till den person vars eduPersonPrincipalNames matchar parameterns värde.
        in: query
        schema:
          type: string

      - name: identifier.value
        description: Begränsa urvalet till den person vilka har ett värde i `externalIdentifiers.value` som matchar parameterns värde. Kan kombineras med parametern `identifier.context` för att begränsa matchningen till en specifik typ av indentifierare.
        in: query
        schema:
          type: string

      - name: identifier.context
        description: Begränsa urvalet till den person vilka har ett värde i `externalIdentifiers.context` som matchar parameterns värde. Kombineras vanligtvis med `identifier.value` parametern.
        in: query
        schema:
          type: string

      - name: relationship.entity.type
        description: |
          Begränsa urvalet till de personer som har en denna typ av relation till andra entititeter. 
          Denna parameter styr vilket entitetstyp som övriga relationship-parametrar filterar på.
          Anges inga andra parametrar så returneras personer som har en relation av denna typ.

          Möjliga relationer:
          - _enrolment_ - filtrerar utifrån elever inskrivning.
          - _duty_ - filtrerar utifrån personer som har minst en tjänstgöring.
          - _placement.child_ - filtrerar utifrån barn som har minst en placering.
          - _placement.owner_ - filtrerar utifrån personer som satta som ägare av minst en placering.
          - _responsibleFor.enrolment_ - filterar utifrån personer som har en _"responsibleFor"_-relation, dvs är en vårdnadshavare eller annan ansvarig vuxen, till en elev med minst en inskrivning.
          - _responsibleFor.placement_ - filterar utifrån personer som har en _"responsibleFor"_-relation, dvs är en vårdnadshavare eller annan ansvarig vuxen, till ett barn med minst en placering.
            Notera att oftast är det bättre att använda _placement.owner_ än denna parameter.
          - _groupMembership_ - filtrerar utifrån gruppmedlemsskap

          Detta kan kombineras med `relationship.startDate.onOrBefore` och `relationship.endDate.onOrAfter` för att begränsa till aktiva relationer.
        in: query
        schema:
          type: string
          enum:
            - enrolment
            - duty
            - placement.child
            - placement.owner
            - responsibleFor.enrolment
            - responsibleFor.placement
            - groupMembership
      - name: relationship.organisation
        description: |
          Begränsa urvalet till de personer som har en relation till angivet organisationselement (vanligtvis en skolenhet). 
          För att begränsa till en viss relationtyp används parametern `relationship.entity.type`.

          Följande fält/relationer används vid filtreringen:
          - _enrolment_ - poster matchandes `person.enrolment.enroledAt`
          - _duty_ - person poster matchandes `duty.person` i en lista filtrerad utifrån `duty.dutyAt`.
          - _placement.child_ - person poster matchandes `placement.child` i en lista filtrerad utifrån `placement.placedAt`.
          - _placement.owner_ - person poster matchandes `placement.owner` i en lista filtrerad utifrån `placement.placedAt`.
          - _responsibleFor.enrolment_ - person poster matchandes `person.responsibles` i en lista filtrerad utifrån `person.enrolment.enroledAt`.
          - _responsibleFor.placement_ - person poster matchandes `person.responsibles` i en lista med person poster som i sin tur matchar `placement.child` i en lista filtrerad utifrån `placement.placedAt`.
          - _groupMembership_ - person poster matchandes `person.groupMemberships`

        in: query
        schema:
          type: string
          format: uuid
      - name: relationship.startDate.onOrBefore
        description: |
          Begränsa urvalet av personer till de som har relationer med startDate innan eller på det angivna datumet (RFC 3339-format, t.ex. "2016-10-15"). 
          Poster med ett startDate som ej är satt, tas alltid med. 
          För att begränsa till en viss relationtyp används parametern `relationship.entity.type`.

          Följande fält/relationer används vid filtreringen:
          - _enrolment_ - poster matchandes `person.enrolment.startDate`
          - _duty_ - person poster matchandes `duty.person` i en lista filtrerad utifrån `duty.startDate`.
          - _placement.child_ - person poster matchandes `placement.child` i en lista filtrerad utifrån `placement.startDate`.
          - _placement.owner_ - person poster matchandes `placement.owner` i en lista filtrerad utifrån `placement.startDate`.
          - _responsibleFor.enrolment_ - person poster matchandes `person.responsibles` i en lista filtrerad utifrån `person.enrolment.startDate`.
          - _responsibleFor.placement_ - person poster matchandes `person.responsibles` i en lista med person poster som i sin tur matchar `placement.child` i en lista filtrerad utifrån `placement.startDate`.
          - _groupMembership_ - poster matchandes `group.groupMemberships.person` eller `group.assignmentRole.duty.person` i en lista filtrerad utifrån `group.groupMemberships.startDate` eller `group.assignmentRole.startDate`.
            
          Detta kan kombineras med _relationship.endDate.onOrAfter_ för att begränsa till aktiva relationer.
        in: query
        schema:
          type: string
          format: date
      - name: relationship.startDate.onOrAfter
        description: |
          Begränsa urvalet av personer till de som har relationer med startDate efter eller på det angivna datumet (RFC 3339-format, t.ex. "2016-10-15"). 
          Poster med ett startDate som ej är satt, tas alltid med. 
          För att begränsa till en viss relationtyp används parametern `relationship.entity.type`.

          Följande fält/relationer används vid filtreringen:
          - _enrolment_ - poster matchandes `person.enrolment.startDate`
          - _duty_ - person poster matchandes `duty.person` i en lista filtrerad utifrån `duty.startDate`.
          - _placement.child_ - person poster matchandes `placement.child` i en lista filtrerad utifrån `placement.startDate`.
          - _placement.owner_ - person poster matchandes `placement.owner` i en lista filtrerad utifrån `placement.startDate`.
          - _responsibleFor.enrolment_ - person poster matchandes `person.responsibles` i en lista filtrerad utifrån `person.enrolment.startDate`.
          - _responsibleFor.placement_ - person poster matchandes `person.responsibles` i en lista med person poster som i sin tur matchar `placement.child` i en lista filtrerad utifrån `placement.startDate`.
          - _groupMembership_ - poster matchande `group.groupMemberships.person` eller `group.assignmentRole.duty.person` i en lista filtrerad utifrån `group.groupMemberships.startDate` eller `group.assignmentRole.startDate`.

        in: query
        schema:
          type: string
          format: date
      - name: relationship.endDate.onOrBefore
        description: |
          Begränsa urvalet av personer till de som har relationer med endDate innan eller på det angivna datumet (RFC 3339-format, t.ex. "2016-10-15"). 
          Poster med ett endDate som ej är satt, tas alltid med.
          För att begränsa till en viss relationtyp används parametern `relationship.entity.type`.

          Följande fält/relationer används vid filtreringen:
          - _enrolment_ - poster matchandes `person.enrolment.endDate`
          - _duty_ - person poster matchandes `duty.person` i en lista filtrerad utifrån `duty.endDate`.
          - _placement.child_ - person poster matchandes `placement.child` i en lista filtrerad utifrån `placement.endDate`.
          - _placement.owner_ - person poster matchandes `placement.owner` i en lista filtrerad utifrån `placement.endDate`.
          - _responsibleFor.enrolment_ - person poster matchandes `person.responsibles` i en lista filtrerad utifrån `person.enrolment.endDate`.
          - _responsibleFor.placement_ - person poster matchandes `person.responsibles` i en lista med person poster som i sin tur matchar `placement.child` i en lista filtrerad utifrån `placement.endDate`.
          - _groupMembership_ - poster matchande `group.groupMemberships.person` eller `group.assignmentRole.duty.person` i en lista filtrerad utifrån `group.groupMemberships.endDate` eller `group.assignmentRole.endDate`.

        in: query
        schema:
          type: string
          format: date
      - name: relationship.endDate.onOrAfter
        description: |
          Begränsa urvalet av personer till de som har relationer med endDate efter eller på det angivna datumet (RFC 3339-format,t.ex. "2016-10-15"). 
          Poster med ett endDate som ej är satt, tas alltid med.
          För att begränsa till en viss relationtyp används parametern `relationship.entity.type`.

          Flöjande fält/relationer används vid filtreringen:
           - _enrolment_ - poster matchandes `person.enrolment.endDate`
           - _duty_ - person poster matchandes `duty.person` i en lista filtrerad utifrån `duty.endDate`.
           - _placement.child_ - person poster matchandes `placement.child` i en lista filtrerad utifrån `placement.endDate`.
           - _placement.owner_ - person poster matchandes `placement.owner` i en lista filtrerad utifrån `placement.endDate`.
           - _responsibleFor.enrolment_ - person poster matchandes `person.responsibles` i en lista filtrerad utifrån `person.enrolment.endDate`.
           - _responsibleFor.placement_ - person poster matchandes `person.responsibles` i en lista med person poster som i sin tur matchar `placement.child` i en lista filtrerad utifrån `placement.endDate`.
           - _groupMembership_ - poster matchande `group.groupMemberships.person` eller `group.assignmentRole.duty.person` i en lista filtrerad utifrån `group.groupMemberships.endDate` eller `group.assignmentRole.endDate`.

          Detta kan kombineras med _relationship.startDate.onOrBefore_ för att begränsa till aktiva relationer.

        in: query
        schema:
          type: string
          format: date
      - $ref: "searchParameters.yaml#/SearchCreatedBefore"
      - $ref: "searchParameters.yaml#/SearchCreatedAfter"
      - $ref: "searchParameters.yaml#/SearchModifiedBefore"
      - $ref: "searchParameters.yaml#/SearchModifiedAfter"
      - $ref: "#/ExpandParameter"
      - $ref: "searchParameters.yaml#/ExpandReferenceNames"
      - name: sortkey
        description: Anger hur resultatet ska sorteras.
        in: query
        schema:
          type: string
          enum:
            - DisplayNameAsc
            - GivenNameDesc
            - GivenNameAsc
            - FamilyNameDesc
            - FamilyNameAsc
            - CivicNoAsc
            - CivicNoDesc
            - ModifiedDesc
      - $ref: "searchParameters.yaml#/Limit"
      - $ref: "searchParameters.yaml#/PageToken"
    responses:
      200:
        description: Anropet lyckades.
        content:
          application/json:
            schema:
              $ref: "../Person.yaml#/PersonsExpanded"
      400:
        $ref: "../openapi.yaml#/components/responses/400_invalid_filter"
      403:
        $ref: "../openapi.yaml#/components/responses/403_not_authorised"
      default:
        $ref: "../openapi.yaml#/components/responses/default_error"

personsLookup:
  post:
    tags:
      - Person
    summary: Hämta många personer baserat på en lista av ID:n eller personnummer.
    description: >
      Istället för att hämta personer en i taget med en loop
      av GET-anrop så finns det även möjlighet att hämta många personer
      på en gång genom att skicka ett anrop med en lista med önskade personer.
    parameters:
      - $ref: "#/ExpandParameter"
      - $ref: "searchParameters.yaml#/ExpandReferenceNames"
    responses:
      200:
        description: Anropet lyckades.
        content:
          application/json:
            schema:
              $ref: "../Person.yaml#/PersonsExpandedArray"
      403:
        $ref: "../openapi.yaml#/components/responses/403_not_authorised"
      503:
        $ref: "../openapi.yaml#/components/responses/503_overload"
      default:
        $ref: "../openapi.yaml#/components/responses/default_error"
    requestBody:
      description: >
        En lista med personnummer och / eller uuid:n på personer.
      content:
        application/json:
          schema:
            type: object
            properties:
              ids:
                type: array
                items:
                  type: string
                  format: uuid
              civicNos:
                type: array
                items:
                  description: >
                    Personnummer, samordningsnummer eller tillfälliga personnummer, och motsvarande för andra länder.
                    För svenska personnummner **ska** formatet 12 tecken utan divis användas. Se exempel.
                  type: string
            example:
              ids:
                - d544563a-747a-42d3-8d37-415a101537fa
              civicNos:
                - "201002037271"
      required: true

personsById:
  get:
    tags:
      - Person
    summary: Get person by person id
    parameters:
      - name: id
        in: path
        description: ID för personen som ska hämtas
        required: true
        schema:
          type: string
          format: uuid
      - $ref: "#/ExpandParameter"
      - $ref: "searchParameters.yaml#/ExpandReferenceNames"
    responses:
      200:
        description: Anropet lyckades.
        content:
          application/json:
            schema:
              $ref: "../Person.yaml#/PersonExpanded"
      400:
        $ref: "../openapi.yaml#/components/responses/400_invalid_id"
      403:
        $ref: "../openapi.yaml#/components/responses/403_not_authorised"
      404:
        $ref: "../openapi.yaml#/components/responses/404_not_found"
      default:
        $ref: "../openapi.yaml#/components/responses/default_error"

ExpandParameter:
  name: expand
  description: Beskriver om expanderade data ska hämtas
  in: query
  schema:
    type: array
    items:
      type: string
      enum:
        [duties, responsibleFor, placements, ownedPlacements, groupMemberships]
